/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import models.Storage;
import utilities.UtilityFunctions;

/**
 *
 * @author Roscoe Alicbusan
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    DialogClass dialogClass;
    
    public MainFrame() {
        dialogClass = new DialogClass(this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        sourceCodeArea = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        internalRegTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        registerTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        memoryTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        codeTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        pipelineMap = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        loadButton = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MicroMIPS64");
        setMaximumSize(new java.awt.Dimension(945, 640));
        setMinimumSize(new java.awt.Dimension(945, 640));
        setSize(new java.awt.Dimension(945, 640));

        jLabel1.setText("Pipeline Map:");

        jLabel2.setText("Internal MIPS64 Registers:");

        jLabel17.setText("Registers:");

        sourceCodeArea.setColumns(20);
        sourceCodeArea.setRows(5);
        jScrollPane3.setViewportView(sourceCodeArea);

        jScrollPane4.setViewportView(jScrollPane3);

        jLabel26.setText("Source Code:");

        internalRegTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Register", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DefaultTableModel internalRegModel = (DefaultTableModel) internalRegTable.getModel();

        internalRegModel.addRow(new Object[]{"IF/ID.IR", "00000000"});
        internalRegModel.addRow(new Object[]{"IF/ID.NPC", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"PC", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"ID/EX.IR", "00000000"});
        internalRegModel.addRow(new Object[]{"ID/EX.NPC", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"ID/EX.A", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"ID/EX.B", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"ID/EX.IMM", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"EX/MEM.IR", "00000000"});
        internalRegModel.addRow(new Object[]{"EX/MEM.ALU", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"EX/MEM.COND", "0"});
        internalRegModel.addRow(new Object[]{"EX/MEM.B", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"MEM/WB.IR", "00000000"});
        internalRegModel.addRow(new Object[]{"MEM/WB.LMD", "0000000000000000"});
        internalRegModel.addRow(new Object[]{"MEM/WB.ALU", "0000000000000000"});
        internalRegTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(internalRegTable);
        if (internalRegTable.getColumnModel().getColumnCount() > 0) {
            internalRegTable.getColumnModel().getColumn(0).setResizable(false);
            internalRegTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            internalRegTable.getColumnModel().getColumn(1).setResizable(false);
            internalRegTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        }

        registerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Register", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            JTextField textField = new JTextField("");

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DefaultTableModel registerModel = (DefaultTableModel) registerTable.getModel();

        for(int i=0;i<32;i++){
            registerModel.addRow(new Object[]{"R" + i, "0000000000000000"});
        }

        registerTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                if (me.getClickCount() == 2) {
                    int row = table.rowAtPoint(p);
                    dialogClass.createDialog("NOINPUT", 0, row);
                    dialogClass.showDialog();
                }
            }
        });
        registerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(registerTable);

        jLabel3.setText("Data Segment:");

        memoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        memoryTable.setMaximumSize(new java.awt.Dimension(0, 0));
        memoryTable.setMinimumSize(new java.awt.Dimension(0, 0));
        memoryTable.getTableHeader().setReorderingAllowed(false);
        DefaultTableModel memoryModel = (DefaultTableModel) memoryTable.getModel();

        int memVal = 0x3000;

        for(int i=0;i<1024;i++){
            memoryModel.addRow(new Object[]{Integer.toHexString(memVal).toUpperCase(), "0000000000000000"});
            memVal += 0x8;
        }

        memoryTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                String memoryAddress;
                if (me.getClickCount() == 2) {
                    int row = table.rowAtPoint(p);
                    memoryAddress = (memoryTable.getValueAt(row, 0)).toString();
                    dialogClass.createDialog(memoryAddress, 1, row);
                    dialogClass.showDialog();
                }
            }
        });
        jScrollPane6.setViewportView(memoryTable);
        if (memoryTable.getColumnModel().getColumnCount() > 0) {
            memoryTable.getColumnModel().getColumn(0).setResizable(false);
            memoryTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            memoryTable.getColumnModel().getColumn(1).setResizable(false);
            memoryTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        }

        codeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Representation", "Label", "Instruction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        codeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(codeTable);
        if (codeTable.getColumnModel().getColumnCount() > 0) {
            codeTable.getColumnModel().getColumn(0).setResizable(false);
            codeTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            codeTable.getColumnModel().getColumn(1).setResizable(false);
            codeTable.getColumnModel().getColumn(1).setPreferredWidth(60);
            codeTable.getColumnModel().getColumn(2).setResizable(false);
            codeTable.getColumnModel().getColumn(2).setPreferredWidth(30);
            codeTable.getColumnModel().getColumn(3).setResizable(false);
            codeTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jLabel4.setText("Code Segment:");

        jMenu1.setText("Run");

        jMenu5.setText("Run One Cycle");
        jMenu1.add(jMenu5);

        jMenu6.setText("Run All Cycles");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu6);

        jMenuBar1.add(jMenu1);

        loadButton.setText("Load");
        loadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadButtonMouseClicked(evt);
            }
        });
        jMenuBar1.add(loadButton);

        jMenu3.setText("Memory");

        jMenu4.setText("GOTO Memory");
        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(19, 19, 19)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(220, 220, 220)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addGap(204, 204, 204)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pipelineMap))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(pipelineMap))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*private class DrawPipelineMap extends JPanel {

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);  

            Graphics2D g2d = (Graphics2D) g;
            animCycles.stream().forEach((cycle) -> {
                cycle.paint(g2d);
            });
        }
    }*/
    
    private void loadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadButtonMouseClicked
        try {
            String userCode = sourceCodeArea.getText();

            System.out.println(userCode);
        } catch (Exception e) {
            //do nothing
        }
    }//GEN-LAST:event_loadButtonMouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        PipelinePanel pipelinePanel = new PipelinePanel();
        pipelinePanel.setSize(500, 500);
        //pipelinePanel.setPreferredSize(new Dimension(1000, 1000));
        pipelineMap.add(pipelinePanel);
        pipelinePanel.repaint();
        /*try {
            DrawPipelineMap drawPane = new DrawPipelineMap();
            drawPane.setSize(600, 600);
            pipelineMap.add(drawPane);
            ArrayList<Cycle> cycles = new ArrayList<Cycle>();
            
            cycles.add(new Cycle(Cycle.INSTRUCTION_FETCH, 0, 0));
            
            cycles.add(new Cycle(Cycle.INSTRUCTION_FETCH, 1, 1));
            cycles.add(new Cycle(Cycle.INSTRUCTION_DECODE, 0, 1));

            cycles.add(new Cycle(Cycle.INSTRUCTION_FETCH, 2, 2));
            cycles.add(new Cycle(Cycle.INSTRUCTION_DECODE, 1, 2));
            cycles.add(new Cycle(Cycle.EXECUTION, 0, 2));

            cycles.add(new Cycle(Cycle.STALL, 2, 3));
            cycles.add(new Cycle(Cycle.EXECUTION, 1, 3));
            cycles.add(new Cycle(Cycle.MEMORY_ACCESS, 0, 3));

            int x, y;
            for (Cycle cycle : cycles) {
                x = cycle.getClockCycleNo();
                y = cycle.getInstructionNo();
                switch (cycle.getCycleString()) {
                    case "IF":
                        animCycles.add(new MapBlock(x*30, y*30, "#2ecc71"));
                        //drawPane.update(x*30, y*30, "#2ecc71");
                        break;
                    case "ID":
                        animCycles.add(new MapBlock(x*30, y*30, "#3498db"));
                        break;
                    case "EX":
                        animCycles.add(new MapBlock(x*30, y*30, "#f1c40f"));
                        break;
                    case "MEM":
                        animCycles.add(new MapBlock(x*30, y*30, "#e67e22"));
                        break;    
                    case "WB":
                        animCycles.add(new MapBlock(x*30, y*30, "#e74c3c"));
                        break;
                    default:
                        animCycles.add(new MapBlock(x*30, y*30, "#000000"));
                        break;
                }
                
                repaint();
            }
        } catch(Exception e){
            
        }*/
    }//GEN-LAST:event_jMenu6MouseClicked

    public void setValue(String memoryAddress, String value, int toggle, int row) {
        String s;
    
        try {
            if(toggle == 0) {
                //register
                DefaultTableModel model = (DefaultTableModel)registerTable.getModel();
                Storage.storeRegisterValue(row, Long.parseUnsignedLong(value, 16));
                s = (UtilityFunctions.to64BitHexString(Storage.getRegisterValue(row))).toUpperCase();
                model.setValueAt(s, row, 1);
            }
            else {
                //memory
                DefaultTableModel model = (DefaultTableModel)memoryTable.getModel();
                Storage.dataStoreDouble(Integer.parseInt(memoryAddress, 16), Long.parseUnsignedLong(value, 16));
                s = (UtilityFunctions.to64BitHexString(Storage.dataLoadDouble(Integer.parseInt(memoryAddress, 16)))).toUpperCase();
                model.setValueAt(s, row, 1);
            }
        }   catch (Exception e) {
            //do nothing
        }
    }

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable codeTable;
    private javax.swing.JTable internalRegTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JMenu loadButton;
    private javax.swing.JTable memoryTable;
    private javax.swing.JScrollPane pipelineMap;
    private javax.swing.JTable registerTable;
    private javax.swing.JTextArea sourceCodeArea;
    // End of variables declaration//GEN-END:variables
}
